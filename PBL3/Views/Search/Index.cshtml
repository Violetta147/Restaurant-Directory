@model PBL3.ViewModel.SearchViewModel

@{
    ViewData["Title"] = "Search";
    ViewData["BodyClass"] = "search-page";
}

@section Styles {
    <!-- Mapbox GL CSS -->
    <link href="https://api.mapbox.com/mapbox-gl-js/v3.12.0/mapbox-gl.css" rel="stylesheet">
    <!-- Bootstrap Icons -->
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap-icons@1.11.3/font/bootstrap-icons.min.css">    
    <!-- Custom CSS-->
    <link rel="stylesheet" href="~/css/restaurant-card-new.css" asp-append-version="true">
    <link rel="stylesheet" href="~/css/search-results.css" asp-append-version="true">
    <link rel="stylesheet" href="~/css/restaurant-ui-improvements.css" asp-append-version="true">
}

<!-- Hidden fields to pass data to JavaScript -->
<input type="hidden" id="mapbox-token" value="@ViewData["MapboxToken"]">
<input type="hidden" id="map-initial-lat" value="@(Model.Lat?.ToString(System.Globalization.CultureInfo.InvariantCulture) ?? "16.075000")">
<input type="hidden" id="map-initial-lng" value="@(Model.Lng?.ToString(System.Globalization.CultureInfo.InvariantCulture) ?? "108.206230")">
<input type="hidden" id="map-initial-query" value="@Model.SearchTerm">

<div class="container-fluid" id="main-frame">

    <!-- LEFT SECTION (Filters & Results) -->
    <div id="left-section">
        <aside id="filters-column">
            <div class="card">
                <div class="card-header">
                    <h5 class="mb-0"><i class="bi bi-funnel me-2"></i>Bộ lọc</h5>
                </div>
                <div class="card-body">
                    <form asp-action="Index" asp-controller="Search" method="get" id="filter-form" autocomplete="off">
                        <!-- Hidden fields -->
                        <input type="hidden" name="SearchTerm" value="@Model.SearchTerm" />
                        <input type="hidden" name="Address" value="@Model.Address" />
                        @if (Model.Lat.HasValue) { <input type="hidden" name="Lat" value="@Model.Lat.Value.ToString(System.Globalization.CultureInfo.InvariantCulture)" /> }
                        @if (Model.Lng.HasValue) { <input type="hidden" name="Lng" value="@Model.Lng.Value.ToString(System.Globalization.CultureInfo.InvariantCulture)" /> }
                        <input type="hidden" name="Page" value="1" />
                        <input type="hidden" name="PageSize" value="@Model.PageSize" />

                        <!-- Filters content here -->
                         <div class="mb-3">
                             <label class="form-label fw-bold">Danh Mục</label>
                             @if (ViewBag.CuisineTypes != null) {
                                 var cuisineTypes = ViewBag.CuisineTypes as List<PBL3.Models.CuisineType>;
                                 if (cuisineTypes != null) {
                                     foreach (var cuisine in cuisineTypes.Take(6)) {
                                        bool isSelected = Model.CuisineTypeIds != null && Model.CuisineTypeIds.Contains(cuisine.Id);
                                        <div class="form-check"><input class="form-check-input" type="checkbox" name="CuisineTypeIds" value="@cuisine.Id" id="cuisine_@cuisine.Id" @(isSelected ? "checked" : "")><label class="form-check-label" for="cuisine_@cuisine.Id">@cuisine.Name</label></div>
                                     }
                                     if (cuisineTypes.Count > 6) {
                                        <button type="button" class="btn btn-link btn-sm p-0" data-bs-toggle="modal" data-bs-target="#allCategoriesModal">Xem tất cả</button>
                                     }
                                 }
                             }
                         </div>
                         <div class="mb-3">
                             <label class="form-label fw-bold">Khoảng giá</label>
                             <div class="row g-2">
                                <div class="col-6"><input type="number" name="MinPrice" value="@Model.MinPrice" class="form-control form-control-sm" placeholder="Tối thiểu"></div>
                                <div class="col-6"><input type="number" name="MaxPrice" value="@Model.MaxPrice" class="form-control form-control-sm" placeholder="Tối đa"></div>
                             </div>
                         </div>
                         <div class="mb-3">
                              <label class="form-label fw-bold">Khoảng cách</label>
                              <div class="form-check"><input class="form-check-input" type="radio" name="MaxDistance" id="distance-all" value="" @(string.IsNullOrEmpty(Model.MaxDistance) ? "checked" : "")><label class="form-check-label" for="distance-all">Tất cả</label></div>
                              <div class="form-check"><input class="form-check-input" type="radio" name="MaxDistance" id="distance-5km" value="5" @(Model.MaxDistance == "5" ? "checked" : "")><label class="form-check-label" for="distance-5km">Dưới 5 km</label></div>
                              <div class="form-check"><input class="form-check-input" type="radio" name="MaxDistance" id="distance-2km" value="2" @(Model.MaxDistance == "2" ? "checked" : "")><label class="form-check-label" for="distance-2km">Dưới 2 km</label></div>
                              <div class="form-check"><input class="form-check-input" type="radio" name="MaxDistance" id="distance-1km" value="1" @(Model.MaxDistance == "1" ? "checked" : "")><label class="form-check-label" for="distance-1km">Dưới 1 km</label></div>
                         </div>
                        
                        <div class="d-grid mt-4">
                            <button type="submit" id="apply-filters-btn" class="btn btn-primary">Áp dụng bộ lọc</button>
                        </div>
                    </form>
                </div>
            </div>
        </aside>

        <!-- Restaurants Column -->
        <main id="restaurants-column">
            <!-- Results Header -->
            <div class="results-header mb-3 d-flex justify-content-between align-items-center">
                 @{ bool hasRestaurants = Model.RestaurantCards?.Any() ?? false; }
                 <div>
                    <h1 class="h4 mb-0">
                        @if (hasRestaurants) {
                            <span>Kết quả cho "@Model.SearchTerm"</span>
                        } else {
                            <span>Không tìm thấy kết quả</span>
                        }
                    </h1>                    @if(hasRestaurants) {
                        <small class="text-muted">Hiển thị @(Model.RestaurantCards?.Count ?? 0) của @(Model.RestaurantCards?.TotalItemCount ?? 0)</small>
                    }
                 </div>                 @if (hasRestaurants) {
                     <form asp-action="Index" asp-controller="Search" method="get" id="sort-form" class="ms-3">
                         <input type="hidden" name="SearchTerm" value="@Model.SearchTerm" />
                         <input type="hidden" name="Address" value="@Model.Address" />
                         <select name="SortBy" class="form-select form-select-sm" onchange="this.form.submit()" style="min-width: 180px;">
                             <option value="relevance" selected="@(Model.SortBy == "relevance")">Sắp xếp: Phù hợp nhất</option>
                             <option value="highestrated" selected="@(Model.SortBy == "highestrated")">Sắp xếp: Đánh giá cao nhất</option>
                             <option value="mostreviewed" selected="@(Model.SortBy == "mostreviewed")">Sắp xếp: Đánh giá nhiều nhất</option>
                         </select>
                     </form>
                 }
            </div>            <!-- Restaurant List -->
             @if (hasRestaurants) {
                <div id="restaurant-list">
                    @await Html.PartialAsync("_RestaurantCardPartial", Model.RestaurantCards)
                </div>
                
                <!-- Pagination - Always visible container -->
                <div class="pagination-container">
                    @if (Model.RestaurantCards != null && Model.RestaurantCards.PageCount > 1) {
                        <nav aria-label="Pagination">
                           <ul class="pagination">
                               @if (Model.RestaurantCards.HasPreviousPage) { <li class="page-item"><a class="page-link" href="javascript:loadPage(@(Model.RestaurantCards.PageNumber - 1))">«</a></li> }
                               @for (int i = 1; i <= Model.RestaurantCards.PageCount; i++) { <li class="page-item @(i == Model.RestaurantCards.PageNumber ? "active" : "")" data-page="@i"><a class="page-link" href="javascript:loadPage(@i)">@i</a></li> }
                               @if (Model.RestaurantCards.HasNextPage) { <li class="page-item"><a class="page-link" href="javascript:loadPage(@(Model.RestaurantCards.PageNumber + 1))">»</a></li> }
                           </ul>
                        </nav>
                    }
                </div>
             } else {
                <div class="text-center p-5 bg-light rounded">
                    <p>Không tìm thấy nhà hàng nào phù hợp với tìm kiếm của bạn.</p>
                </div>
             }
        </main>
    </div>

    <!-- RIGHT SECTION (Map) -->
    <aside id="map-section">
        <div id="mapbox-container"></div>
    </aside>

</div>

<!-- All Categories Modal -->
<div class="modal fade" id="allCategoriesModal" tabindex="-1" aria-labelledby="allCategoriesModalLabel" aria-hidden="true">
    <div class="modal-dialog modal-lg">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="allCategoriesModalLabel">Tất cả danh mục</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                <div class="row">
                    @if (ViewBag.CuisineTypes != null)
                    {
                        var cuisineTypes = ViewBag.CuisineTypes as List<PBL3.Models.CuisineType>;
                        if (cuisineTypes != null)
                        {
                            @foreach (var cuisine in cuisineTypes)
                            {
                                bool isSelected = Model.CuisineTypeIds != null && System.Linq.Enumerable.Contains(Model.CuisineTypeIds, cuisine.Id);
                                <div class="col-md-4 mb-2">
                                    <div class="form-check">
                                        <input class="form-check-input modal-cuisine-checkbox" type="checkbox" 
                                               value="@cuisine.Id" id="modal_cuisine_@cuisine.Id" 
                                               @(isSelected ? "checked" : "")>
                                        <label class="form-check-label" for="modal_cuisine_@cuisine.Id">
                                            @cuisine.Name
                                        </label>
                                    </div>
                                </div>
                            }
                        }
                    }
                </div>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Hủy</button>
                <button type="button" class="btn btn-primary" id="applyModalCategories">Áp dụng</button>
            </div>
        </div>    </div>
</div>

@section Scripts {    
    <script>
        // Initialize filters functionality
        document.addEventListener('DOMContentLoaded', function() {
            // Remove any animations from the Apply Filters button
            const applyFiltersBtn = document.getElementById('apply-filters-btn');
            if (applyFiltersBtn) {
                // Ensure button works correctly without animations
                applyFiltersBtn.addEventListener('click', function(e) {
                    const form = this.closest('form');
                    if (form) {
                        // No loading animations - just submit
                        form.submit();
                    }
                });
            }

            // Handle modal categories
            const applyModalBtn = document.getElementById('applyModalCategories');
            if (applyModalBtn) {
                applyModalBtn.addEventListener('click', function() {
                    const checkedBoxes = document.querySelectorAll('.modal-cuisine-checkbox:checked');
                    const selectedIds = Array.from(checkedBoxes).map(cb => cb.value);
                      // Update main form checkboxes
                    document.querySelectorAll('input[name="CuisineTypeIds"]').forEach(cb => {
                        cb.checked = selectedIds.includes(cb.value);
                    });
                    
                    // Close modal
                    const modal = bootstrap.Modal.getInstance(document.getElementById('allCategoriesModal'));
                    if (modal) {
                        modal.hide();
                    }
                      // Submit filter form
                    document.getElementById('filter-form').submit();
                });
            }

            document.querySelectorAll('input[name="CuisineTypeIds"]').forEach(checkbox => {
                checkbox.addEventListener('change', function() {
                    // Auto-submit form when cuisine type changes
                    setTimeout(() => {
                        document.getElementById('filter-form').submit();
                    }, 100);
                });
            });
        });
        window.loadPage = function(pageNumber) {
            console.log('loadPage called with page:', pageNumber);
            
            // Get current search parameters
            const params = new URLSearchParams(window.location.search);
            
            // Update page parameter
            params.set('Page', pageNumber);
            
            console.log('Requesting URL:', `/Search?${params.toString()}`);
            
            // Show loading
            const restaurantList = document.getElementById('restaurant-list');
            if (restaurantList) {
                restaurantList.innerHTML = '<div class="text-center py-5"><div class="spinner-border text-primary" role="status"><span class="visually-hidden">Loading...</span></div></div>';
            }
            
            // Send AJAX request
            fetch(`/Search?${params.toString()}`)
                .then(response => {
                    console.log('Response status:', response.status);
                    if (!response.ok) {
                        throw new Error(`HTTP error! status: ${response.status}`);
                    }
                    return response.text();
                })
                .then(html => {
                    console.log('Received HTML length:', html.length);
                    
                    // Parse the response to get both restaurant list and pagination
                    const parser = new DOMParser();
                    const doc = parser.parseFromString(html, 'text/html');
                    
                    // Update restaurant list content
                    const newRestaurantContent = doc.querySelector('#restaurant-list');
                    if (newRestaurantContent && restaurantList) {
                        restaurantList.innerHTML = newRestaurantContent.innerHTML;
                    }
                      // Update pagination
                    const currentPagination = document.querySelector('nav[aria-label="Pagination"]');
                    const newPagination = doc.querySelector('nav[aria-label="Pagination"]');
                    
                    // If we can find pagination containers
                    if (currentPagination && newPagination) {
                        // Update pagination HTML
                        currentPagination.innerHTML = newPagination.innerHTML;
                        
                        // Explicitly set the active page class
                        const pageItems = currentPagination.querySelectorAll('.page-item');
                        pageItems.forEach(item => {
                            const dataPage = parseInt(item.getAttribute('data-page'));
                            if (dataPage === pageNumber) {
                                item.classList.add('active');
                            } else {
                                item.classList.remove('active');
                            }
                        });
                    } else {
                        console.warn('Pagination elements not found');
                    }
                    
                    // Update URL without reloading page
                    const newUrl = `${window.location.pathname}?${params.toString()}`;
                    window.history.pushState({ path: newUrl }, '', newUrl);
                    
                    // Scroll to top of results
                    document.querySelector('.results-header')?.scrollIntoView({ behavior: 'smooth' });
                    
                    // Reload restaurants on map after AJAX update
                    if (typeof loadRestaurantsFromList === 'function') {
                        console.log('Calling loadRestaurantsFromList');
                        loadRestaurantsFromList();
                    } else {
                        console.warn('loadRestaurantsFromList function not found');
                    }
                    
                    // Re-initialize restaurant card click handlers
                    initializeRestaurantCardHandlers();
                })
                .catch(error => {
                    console.error('Error:', error);
                    if (restaurantList) {
                        restaurantList.innerHTML = '<div class="alert alert-danger">Đã xảy ra lỗi khi tải dữ liệu. Vui lòng thử lại.</div>';
                    }
                });
        }        
        // Function to initialize restaurant card handlers
        function initializeRestaurantCardHandlers() {
            const restaurantCards = document.querySelectorAll('.restaurant-item');
            restaurantCards.forEach(card => {
                // Remove existing listeners
                card.replaceWith(card.cloneNode(true));
            });
            
            // Re-add listeners
            const newRestaurantCards = document.querySelectorAll('.restaurant-item');
            newRestaurantCards.forEach(card => {
                card.addEventListener('click', function() {
                    // Remove highlighting from all cards
                    newRestaurantCards.forEach(c => c.classList.remove('restaurant-card-highlighted'));
                    
                    // Highlight clicked card
                    this.classList.add('restaurant-card-highlighted');
                    
                    // Get restaurant data
                    const restaurantId = this.dataset.id;
                    const lat = parseFloat(this.dataset.lat);
                    const lng = parseFloat(this.dataset.lng);
                    
                    // Pan map to restaurant location if map exists
                    if (typeof map !== 'undefined' && map && lat && lng) {
                        map.jumpTo({
                            center: [lng, lat],
                            zoom: 15
                        });
                        
                        // Trigger marker click if available
                        const markers = document.querySelectorAll(`[data-restaurant-id="${restaurantId}"]`);
                        if (markers.length > 0) {
                            markers[0].click();
                        }
                    }
                });
            });
        }
        
        // Restaurant card interaction with map
        document.addEventListener('DOMContentLoaded', function() {
            // Initialize restaurant card handlers
            initializeRestaurantCardHandlers();
        });
    </script>    
    <!-- Mapbox GL JS -->
    <script src="https://api.mapbox.com/mapbox-gl-js/v3.12.0/mapbox-gl.js"></script>
    <script src="~/js/search/search-map.js" asp-append-version="true"></script>
}